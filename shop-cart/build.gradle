plugins {
    id 'java'
    id 'application'
    id 'org.springframework.boot' version '3.2.5'
    id "io.spring.dependency-management" version "1.1.5"
}

group = 'org.penzgtu.Application'
version = '1.0'

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.yaml:snakeyaml:1.33'
    implementation 'org.projectlombok:lombok:1.18.22'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    annotationProcessor 'org.projectlombok:lombok:1.18.22'
    runtimeOnly 'org.postgresql:postgresql'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.22'
    implementation 'com.github.javafaker:javafaker:1.0.2'
    implementation 'commons-io:commons-io:2.15.1'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.16.1'
    implementation 'org.hibernate.orm:hibernate-community-dialects:6.2.0.Final'
    implementation 'com.github.freva:ascii-table:1.8.0'
    implementation (group: 'commons-dbutils', name: 'commons-dbutils', version: '1.8.1')



    implementation group: 'jakarta.persistence', name: 'jakarta.persistence-api', version: '3.1.0'
    implementation group: 'jakarta.validation', name: 'jakarta.validation-api', version: '3.1.0'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-data-rest'
    implementation "org.springframework.boot:spring-boot-starter-security"
    implementation group: 'io.bretty', name: 'console-view', version: '3.4'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    implementation group: 'io.swagger.core.v3', name: 'swagger-annotations', version: '2.2.22'
    implementation 'org.springdoc:springdoc-openapi-ui:1.6.14'

}

application {
    mainClassName = 'org.penzgtu.Application.Application'
}

tasks.jar {
    manifest {
        attributes(
                'Main-Class': 'org.penzgtu.Application.Application'
        )
    }
    from {
        configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}
